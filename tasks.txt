1. Clean the function (indentations, remove old functions, etc.) - +
2. Change it such that it takes a unifier as a parameter (types in Unification_Base.unifier) - +
3. Store a unifier as a context data:
    a. Read Implentation Manual 1.1.4 Context data - +
    b. Then implement context data that stores a unifier - +
    c. Test it: add a unifier, retrieve it, update it, etc. - +
4. Create a function that first retrieves the unifier from the context and then passes it to the unification tactic as a parameter - +

1. Assume we have a goal of form "A1→A2→...→B"
2. Assume we have a rule of form "A1'→A2'→...→B'"
3. Check if "B ≡ B'" can be unified
4. If they can - apply unifier to goal ∧ rule
5. We get new subgoals: 
  5.a. prove A1',..,An', for each we can assume A1,..An
  5.b. read up resolution (Chapter 2.4.2) - +
  a. take 2 literals, remove, add everything together (resolution)

1. research which resolution method rule_tac is calling + notes - +
2. also have a look at 
	intro
 	elim
	OF 
	subst (call to theorem module?)
(maybe make a scheme) - +
3. have a look at unif_resolve - +-

1) read paper mentioned above (section 1): https://home.in.tum.de/~wimmers/papers/Smashing_Isabelle.pdf - +
2) create higher_order_unification.ML:
  2.1) new file - higher_order_unification.ML - +
  2.2) create function of type unifier - unify - + 
       (+ another function hounify)
  2.3) call unifier from \Pure\unify.ML in unify - +
  2.4) call hounifier from \Pure\unify.ML in hounify - +
  2.5) unifier returns (env*(term*term) list) Seq.seq - +-
  ⇒ we need to create a thm applying env to term*term list that terms are equal
(?: questions - code comments higher_order_unification.ML)
3) check if it works (tests?) - -
(?: questions - usual structure of the tests)
4) inspect unif_resolve - +

1)one way to transform flexflex pairs: 
    1.1)smash them - +
    1.2)apply new env to input terms - + 
    1.3)get thm - +
  2) fix return types - +
  3) example testing - +? (we can as well use the tests for higher_order_unification)
  4) check out Thm module for flexflex pairs - +- 
  5) create a latex file ∧ write what unif_resolve does - +- 

Notes on resolution and methods: https://www.notion.so/Resolution-methods-notes-ae6f6d0c9af648f3bfce35e9afecbab6	

More questions in the comments.